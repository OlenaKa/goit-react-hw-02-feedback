{"version":3,"sources":["Components/Section/Section.js","Components/Statistics/Statistics.js","Components/FeedbackOptions/FeedbackOptions.js","Components/Notification/Notification.js","App.js","index.js"],"names":["Section","title","children","Statistics","good","neutral","bad","total","positivePercentage","defaultProps","FeedbackOptions","options","onLeaveFeedback","Object","keys","map","option","type","name","onClick","Notification","message","App","state","incrementState","e","setState","prevState","target","countTotalFeedback","countPositiveFeedbackPercentage","Math","round","this","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4RAceA,EAZC,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,SAAV,OACd,oCACE,6BAAKD,IACJC,MCHCC,EAAa,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,QAASC,EAAlB,EAAkBA,IAAKC,EAAvB,EAAuBA,MAAOC,EAA9B,EAA8BA,mBAA9B,OACjB,qCACE,uCAAUJ,KACV,0CAAaC,KACb,sCAASC,KACT,wCAAWC,KACX,oDAAuBC,EAAvB,WAIJL,EAAWM,aAAe,CACxBD,mBAAoB,GAWPL,QCAAO,EAtBS,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,gBAAZ,OACtB,mCACGC,OAAOC,KAAKH,GAASI,KAAI,SAACC,GACzB,OACE,wBACEC,KAAK,SACLC,KAAMF,EACNG,QAASP,EAHX,SAMGI,GAFIA,SCHAI,EANM,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAAH,OAAiB,4BAAIA,KCuD3BC,E,4MAhDbC,MAAQ,CACNnB,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAEPkB,eAAiB,SAACC,GAChB,EAAKC,UAAS,SAACC,GACb,IAAMT,EAAOO,EAAEG,OAAOV,KACtB,OAAO,eACJA,EAAOS,EAAUT,GAAQ,O,EAIhCW,mBAAqB,WACnB,OAAO,EAAKN,MAAMnB,KAAO,EAAKmB,MAAMlB,QAAU,EAAKkB,MAAMjB,K,EAG3DwB,gCAAkC,WAChC,OAAOC,KAAKC,MAAO,EAAKT,MAAMnB,KAAO,EAAKyB,qBAAwB,M,4CAEpE,WACE,MAA+BI,KAAKV,MAA5BnB,EAAR,EAAQA,KAAMC,EAAd,EAAcA,QAASC,EAAvB,EAAuBA,IACvB,OACE,qCACE,cAAC,EAAD,CAASL,MAAM,wBAAf,SACE,cAAC,EAAD,CACEU,QAASsB,KAAKV,MACdX,gBAAiBqB,KAAKT,mBAG1B,cAAC,EAAD,CAASvB,MAAM,aAAf,SACGgC,KAAKJ,qBAAuB,EAC3B,cAAC,EAAD,CACEzB,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAO0B,KAAKJ,qBACZrB,mBAAoByB,KAAKH,oCAG3B,cAAC,EAAD,CAAcT,QAAQ,+B,GAzChBa,aCFlBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.25701dfa.chunk.js","sourcesContent":["import PropTypes from \"prop-types\";\n\nconst Section = ({ title, children }) => (\n  <section>\n    <h2>{title}</h2>\n    {children}\n  </section>\n);\n\nSection.propTypes = {\n  title: PropTypes.string.isRequired,\n  children: PropTypes.element.isRequired,\n};\n\nexport default Section;\n","import PropTypes from \"prop-types\";\n\nconst Statistics = ({ good, neutral, bad, total, positivePercentage }) => (\n  <>\n    <p>Good: {good}</p>\n    <p>Neutral: {neutral}</p>\n    <p>Bad: {bad}</p>\n    <p>Total: {total}</p>\n    <p>Positive feedback: {positivePercentage}%</p>\n  </>\n);\n\nStatistics.defaultProps = {\n  positivePercentage: 0,\n};\n\nStatistics.propTypes = {\n  good: PropTypes.number.isRequired,\n  neutral: PropTypes.number.isRequired,\n  bad: PropTypes.number.isRequired,\n  total: PropTypes.number.isRequired,\n  positivePercentage: PropTypes.number,\n};\n\nexport default Statistics;\n","import PropTypes from \"prop-types\";\n\nconst FeedbackOptions = ({ options, onLeaveFeedback }) => (\n  <>\n    {Object.keys(options).map((option) => {\n      return (\n        <button\n          type=\"button\"\n          name={option}\n          onClick={onLeaveFeedback}\n          key={option}\n        >\n          {option}\n        </button>\n      );\n    })}\n  </>\n);\n\nFeedbackOptions.propTypes = {\n  options: PropTypes.object.isRequired,\n  onLeaveFeedback: PropTypes.func.isRequired,\n};\n\nexport default FeedbackOptions;\n","import PropTypes from \"prop-types\";\nconst Notification = ({ message }) => <p>{message}</p>;\n\nNotification.propTypes = {\n  message: PropTypes.string.isRequired,\n};\n\nexport default Notification;\n","import { Component } from \"react\";\nimport \"./App.css\";\nimport Section from \"./Components/Section/Section\";\nimport Statistics from \"./Components/Statistics/Statistics\";\nimport FeedbackOptions from \"./Components/FeedbackOptions/FeedbackOptions\";\nimport Notification from \"./Components/Notification/Notification\";\n\nclass App extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n  incrementState = (e) => {\n    this.setState((prevState) => {\n      const name = e.target.name;\n      return {\n        [name]: prevState[name] + 1,\n      };\n    });\n  };\n  countTotalFeedback = () => {\n    return this.state.good + this.state.neutral + this.state.bad;\n  };\n\n  countPositiveFeedbackPercentage = () => {\n    return Math.round((this.state.good / this.countTotalFeedback()) * 100);\n  };\n  render() {\n    const { good, neutral, bad } = this.state;\n    return (\n      <>\n        <Section title=\"Please leave feedback\">\n          <FeedbackOptions\n            options={this.state}\n            onLeaveFeedback={this.incrementState}\n          />\n        </Section>\n        <Section title=\"Statistics\">\n          {this.countTotalFeedback() > 0 ? (\n            <Statistics\n              good={good}\n              neutral={neutral}\n              bad={bad}\n              total={this.countTotalFeedback()}\n              positivePercentage={this.countPositiveFeedbackPercentage()}\n            ></Statistics>\n          ) : (\n            <Notification message=\"No feedback given\" />\n          )}\n        </Section>\n      </>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}